 ‚úÖ **EJERCICIO 1: Filtrar palabras con m√°s de 5 letras**

 üìå ¬øQu√© debe hacer la funci√≥n?
1. Recibe un **arreglo de palabras** (strings).
2. Recorre el arreglo con `foreach`.
3. Por cada palabra, **verifica su longitud** con `strlen()`.
4. Si tiene **m√°s de 5 letras**, agr√©gala a un nuevo arreglo.
5. Retorna el nuevo arreglo filtrado.

 ‚úèÔ∏è ¬øC√≥mo lo haces?
* Crea un arreglo vac√≠o para las palabras filtradas.
* Usa un `foreach` para recorrer cada palabra.
* Dentro del ciclo, usas `strlen($palabra) > 5`.
* Si cumple la condici√≥n, la agregas con `$nuevarreglo[] = $palabra`.
* Al final, usas `return $nuevarreglo`.

 ‚úÖ **EJERCICIO 2: Calcular el promedio de precios**
 üìå ¬øQu√© debe hacer la funci√≥n?
1. Recibe un **arreglo asociativo**, con productos como claves y precios como valores.
   Ejemplo:
   ["pan" => 10, "leche" => 20, "huevo" => 30]
2. Suma todos los valores ‚Üí usa `array_sum()`.
3. Cuenta los elementos ‚Üí usa `count()`.
4. Divide la suma entre la cantidad para obtener el promedio.
5. Retorna el promedio.
 ‚úèÔ∏è ¬øC√≥mo lo haces?
* Dentro de la funci√≥n, aplica `array_sum($array)` y `count($array)`.
* Divide esos resultados.
* Guarda el resultado en una variable y **ret√≥rnala**.

 ‚úÖ **EJERCICIO 3: Obtener alumnos aprobados (calificaci√≥n >= 6)**
 üìå ¬øQu√© debe hacer la funci√≥n?
1. Recibe un **arreglo multidimensional** donde cada subarreglo representa un alumno con:
   * nombre
   * calificaci√≥n
   Ejemplo:
   [
     ["nombre" => "Ana", "calificacion" => 8],
     ["nombre" => "Luis", "calificacion" => 5]
   ]
2. Recorre el arreglo y verifica qu√© alumnos tienen calificaci√≥n **mayor o igual a 6**.
3. Los guarda en un nuevo arreglo de aprobados.
4. Retorna ese nuevo arreglo.

 ‚úèÔ∏è ¬øC√≥mo lo haces?
* Crea un arreglo vac√≠o para los aprobados.
* Usa `foreach` para recorrer cada alumno.
* Dentro del ciclo, accede a `$alumno['calificacion']`.
* Si la calificaci√≥n es mayor o igual a 6, agrega ese alumno al arreglo de aprobados.
* Al final, retornas ese arreglo.